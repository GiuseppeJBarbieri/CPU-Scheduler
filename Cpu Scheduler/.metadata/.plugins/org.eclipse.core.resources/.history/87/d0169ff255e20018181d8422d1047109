/*
 * 
 * Created By Giuseppe Barbieri
 * Cpu Scheduler App
 * Com 310-S01
 * 11/04/2018
 * 
 */

package view;

import java.net.URL;
import java.util.ArrayList;
import java.util.ResourceBundle;

import algorithm_simulations.First_Come_First_Serve;
import algorithm_simulations.Round_Robin;
import algorithm_simulations.Shortest_Job_First;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import model.Process_Object;

public class Main_Screen_View_Controller implements Initializable {
	@FXML
	private TableView<Process_Object> schedulerTbl;
	@FXML
	private TableColumn<Process_Object, Integer> processCol, arrivalTimeCol, exitTimeCol;
	@FXML
	private ChoiceBox<String> numofProcessesChoiceBox, algorithmChoiceBox, quantumNumChoice;
	@FXML
	private Button randomBurstBtn, calculateBtn;
	@FXML
	private Label p1Lbl, p2Lbl, p3Lbl, p4Lbl, p5Lbl, p6Lbl, p7Lbl, p8Lbl, p9Lbl, p10Lbl;
	@FXML
	private TextField p1BTxt, p2BTxt, p3BTxt, p4BTxt, p5BTxt, p6BTxt, p7BTxt, p8BTxt, p9BTxt, p10BTxt;
	@FXML
	private TextField p1WTxt, p2WTxt, p3WTxt, p4WTxt, p5WTxt, p6WTxt, p7WTxt, p8WTxt, p9WTxt, p10WTxt;
	@FXML
	private TextField p1TTxt, p2TTxt, p3TTxt, p4TTxt, p5TTxt, p6TTxt, p7TTxt, p8TTxt, p9TTxt, p10TTxt;
	@FXML
	private TextField avgWaitTimeTxt, avgTurnaroundTimeTxt;
	@FXML
	private Label processLbl, burstLbl, waitLbl, taLbl, quantumLbl;

	private ArrayList<Process_Object> processList;
	private ArrayList<TextField> burstTxtList;
	private ArrayList<TextField> waitTxtList;
	private ArrayList<TextField> taTxtList;
	private String[] processNumList = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" };
	private String[] quantumList = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15",
			"16", "17", "18", "19", "20" };
	private String[] algorithmList = { "First Come First Serve", "Shortest Job First", "Round Robin",
			"Priority Algorithm" };
	private int numOfProcesses;

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		processList = new ArrayList<>();
		burstTxtList = new ArrayList<>();
		waitTxtList = new ArrayList<>();
		taTxtList = new ArrayList<>();

		setupSchedulerTable();
		setChoiceBoxes();
		createTextFieldArray();

		randomBurstBtn.setOnAction(e -> setRandomBurstTime());
		calculateBtn.setOnAction(e -> calculate());

	}

	private void calculate() {
		if (numofProcessesChoiceBox.getSelectionModel().getSelectedItem() == null
				|| algorithmChoiceBox.getSelectionModel().getSelectedItem() == null) {
			System.out.println("NO BUENO");
		} else {
			try {
				if (algorithmChoiceBox.getSelectionModel().getSelectedIndex() == 0) {
					First_Come_First_Serve fcfs = new First_Come_First_Serve(burstTxtList, numOfProcesses);
					ObservableList<Process_Object> tableList = FXCollections.observableArrayList(fcfs.simulateFCFS());
					schedulerTbl.setItems(tableList);
					fcfs.setTextFields(waitTxtList, taTxtList, avgWaitTimeTxt, avgTurnaroundTimeTxt);

				} else if (algorithmChoiceBox.getSelectionModel().getSelectedIndex() == 1) {
					setProcessList();
					Shortest_Job_First sjf = new Shortest_Job_First(processList);
					ObservableList<Process_Object> tableList = FXCollections.observableArrayList(sjf.simulateSJF());
					schedulerTbl.setItems(tableList);
					sjf.setTextFields(waitTxtList, taTxtList, avgWaitTimeTxt, avgTurnaroundTimeTxt);

				} else if (algorithmChoiceBox.getSelectionModel().getSelectedIndex() == 2) {
					if (quantumNumChoice.getSelectionModel().getSelectedItem() == null) {

					} else {
						setProcessList();
						Round_Robin rr = new Round_Robin(processList, burstTxtList, quantumNumChoice.getSelectionModel().getSelectedIndex());
						ObservableList<Process_Object> tableList = FXCollections.observableArrayList(rr.simulateRR());
						schedulerTbl.setItems(tableList);
						rr.setTextFieldInfo(waitTxtList, taTxtList, avgWaitTimeTxt, avgTurnaroundTimeTxt);
					}
				}
				processList.clear();
			} catch (NumberFormatException ex) {
				System.out.println("NO FIELDS");
			}
		}
	}

	private void setRandomBurstTime() {
		for (int i = 0; i < burstTxtList.size(); i++) {
			burstTxtList.get(i).setText(Integer.toString((int) (Math.random() * 10) + 1));
		}
	}

	private void setProcessList() {
		for (int i = 0; i < numOfProcesses; i++) {
			processList.add(new Process_Object((i + 1), Integer.parseInt(burstTxtList.get(i).getText())));
		}
	}

	private void setupSchedulerTable() {
		processCol.setCellValueFactory(new PropertyValueFactory<Process_Object, Integer>("processNum"));
		arrivalTimeCol.setCellValueFactory(new PropertyValueFactory<Process_Object, Integer>("arrivalTime"));
		exitTimeCol.setCellValueFactory(new PropertyValueFactory<Process_Object, Integer>("exitTime"));
	}

	private void setChoiceBoxes() {
		ObservableList<String> processObsList = FXCollections.observableArrayList(processNumList);
		numofProcessesChoiceBox.setItems(processObsList);
		numofProcessesChoiceBox
				.setOnAction(e -> setTxtFields((numofProcessesChoiceBox.getSelectionModel().getSelectedIndex()) + 1));

		ObservableList<String> algorithmObsList = FXCollections.observableArrayList(algorithmList);
		algorithmChoiceBox.setItems(algorithmObsList);
		algorithmChoiceBox.setOnAction(e -> {
			if (algorithmChoiceBox.getSelectionModel().getSelectedIndex() == 2) {
				quantumLbl.setVisible(true);
				quantumNumChoice.setVisible(true);
			} else {
				quantumLbl.setVisible(false);
				quantumNumChoice.setVisible(false);
			}
		});
		ObservableList<String> quantumObsList = FXCollections.observableArrayList(quantumList);
		quantumNumChoice.setItems(quantumObsList);
	}

	private void createTextFieldArray() {
		burstTxtList.add(p1BTxt);
		burstTxtList.add(p2BTxt);
		burstTxtList.add(p3BTxt);
		burstTxtList.add(p4BTxt);
		burstTxtList.add(p5BTxt);
		burstTxtList.add(p6BTxt);
		burstTxtList.add(p7BTxt);
		burstTxtList.add(p8BTxt);
		burstTxtList.add(p9BTxt);
		burstTxtList.add(p10BTxt);

		waitTxtList.add(p1WTxt);
		waitTxtList.add(p2WTxt);
		waitTxtList.add(p3WTxt);
		waitTxtList.add(p4WTxt);
		waitTxtList.add(p5WTxt);
		waitTxtList.add(p6WTxt);
		waitTxtList.add(p7WTxt);
		waitTxtList.add(p8WTxt);
		waitTxtList.add(p9WTxt);
		waitTxtList.add(p10WTxt);

		taTxtList.add(p1TTxt);
		taTxtList.add(p2TTxt);
		taTxtList.add(p3TTxt);
		taTxtList.add(p4TTxt);
		taTxtList.add(p5TTxt);
		taTxtList.add(p6TTxt);
		taTxtList.add(p7TTxt);
		taTxtList.add(p8TTxt);
		taTxtList.add(p9TTxt);
		taTxtList.add(p10TTxt);
	}

	private void setTxtFields(int numOfProcessesChoice) {
		numOfProcesses = numOfProcessesChoice;
		schedulerTbl.setItems(null);
		processLbl.setVisible(true);
		burstLbl.setVisible(true);
		waitLbl.setVisible(true);
		taLbl.setVisible(true);
		for (int i = 0; i < 10; i++) {
			burstTxtList.get(i).setVisible(true);
			waitTxtList.get(i).setVisible(true);
			taTxtList.get(i).setVisible(true);
		}

		p1Lbl.setVisible(true);
		p2Lbl.setVisible(true);
		p3Lbl.setVisible(true);
		p4Lbl.setVisible(true);
		p5Lbl.setVisible(true);
		p6Lbl.setVisible(true);
		p7Lbl.setVisible(true);
		p8Lbl.setVisible(true);
		p9Lbl.setVisible(true);
		p10Lbl.setVisible(true);
		avgWaitTimeTxt.clear();
		avgTurnaroundTimeTxt.clear();

		switch (numOfProcessesChoice) {
		case 1:
			for (int i = 1; i < 10; i++) {
				burstTxtList.get(i).setVisible(false);
				waitTxtList.get(i).setVisible(false);
				taTxtList.get(i).setVisible(false);
			}
			p2Lbl.setVisible(false);
			p3Lbl.setVisible(false);
			p4Lbl.setVisible(false);
			p5Lbl.setVisible(false);
			p6Lbl.setVisible(false);
			p7Lbl.setVisible(false);
			p8Lbl.setVisible(false);
			p9Lbl.setVisible(false);
			p10Lbl.setVisible(false);
			processLbl.setVisible(false);
			burstLbl.setVisible(false);
			waitLbl.setVisible(false);
			taLbl.setVisible(false);
			break;
		case 2:
			for (int i = 2; i < 10; i++) {
				burstTxtList.get(i).setVisible(false);
				waitTxtList.get(i).setVisible(false);
				taTxtList.get(i).setVisible(false);
			}
			p3Lbl.setVisible(false);
			p4Lbl.setVisible(false);
			p5Lbl.setVisible(false);
			p6Lbl.setVisible(false);
			p7Lbl.setVisible(false);
			p8Lbl.setVisible(false);
			p9Lbl.setVisible(false);
			p10Lbl.setVisible(false);
			processLbl.setVisible(false);
			burstLbl.setVisible(false);
			waitLbl.setVisible(false);
			taLbl.setVisible(false);
			break;
		case 3:
			for (int i = 3; i < 10; i++) {
				burstTxtList.get(i).setVisible(false);
				waitTxtList.get(i).setVisible(false);
				taTxtList.get(i).setVisible(false);
			}
			p4Lbl.setVisible(false);
			p5Lbl.setVisible(false);
			p6Lbl.setVisible(false);
			p7Lbl.setVisible(false);
			p8Lbl.setVisible(false);
			p9Lbl.setVisible(false);
			p10Lbl.setVisible(false);
			processLbl.setVisible(false);
			burstLbl.setVisible(false);
			waitLbl.setVisible(false);
			taLbl.setVisible(false);
			break;
		case 4:
			for (int i = 4; i < 10; i++) {
				burstTxtList.get(i).setVisible(false);
				waitTxtList.get(i).setVisible(false);
				taTxtList.get(i).setVisible(false);
			}
			p5Lbl.setVisible(false);
			p6Lbl.setVisible(false);
			p7Lbl.setVisible(false);
			p8Lbl.setVisible(false);
			p9Lbl.setVisible(false);
			p10Lbl.setVisible(false);
			processLbl.setVisible(false);
			burstLbl.setVisible(false);
			waitLbl.setVisible(false);
			taLbl.setVisible(false);
			break;
		case 5:
			for (int i = 5; i < 10; i++) {
				burstTxtList.get(i).setVisible(false);
				waitTxtList.get(i).setVisible(false);
				taTxtList.get(i).setVisible(false);
			}
			p6Lbl.setVisible(false);
			p7Lbl.setVisible(false);
			p8Lbl.setVisible(false);
			p9Lbl.setVisible(false);
			p10Lbl.setVisible(false);
			processLbl.setVisible(false);
			burstLbl.setVisible(false);
			waitLbl.setVisible(false);
			taLbl.setVisible(false);
			break;
		case 6:
			for (int i = 6; i < 10; i++) {
				burstTxtList.get(i).setVisible(false);
				waitTxtList.get(i).setVisible(false);
				taTxtList.get(i).setVisible(false);
			}
			p7Lbl.setVisible(false);
			p8Lbl.setVisible(false);
			p9Lbl.setVisible(false);
			p10Lbl.setVisible(false);
			break;
		case 7:
			for (int i = 7; i < 10; i++) {
				burstTxtList.get(i).setVisible(false);
				waitTxtList.get(i).setVisible(false);
				taTxtList.get(i).setVisible(false);
			}
			p8Lbl.setVisible(false);
			p9Lbl.setVisible(false);
			p10Lbl.setVisible(false);
			break;
		case 8:
			for (int i = 8; i < 10; i++) {
				burstTxtList.get(i).setVisible(false);
				waitTxtList.get(i).setVisible(false);
				taTxtList.get(i).setVisible(false);
			}
			p9Lbl.setVisible(false);
			p10Lbl.setVisible(false);
			break;
		case 9:
			p10BTxt.setVisible(false);
			p10WTxt.setVisible(false);
			p10TTxt.setVisible(false);
			p10Lbl.setVisible(false);
			break;
		case 10:
			break;
		}
	}

}
